class BlockedItem < ::ApplicationRecord
  extend _ActiveRecord_Relation_ClassMethods[BlockedItem, ActiveRecord_Relation, Integer]

  module GeneratedAttributeMethods
    def id: () -> Integer

    def id=: (Integer) -> Integer

    def id?: () -> bool

    def id_changed?: () -> bool

    def id_change: () -> [ Integer?, Integer? ]

    def id_will_change!: () -> void

    def id_was: () -> Integer?

    def id_previously_changed?: () -> bool

    def id_previous_change: () -> Array[Integer?]?

    def id_previously_was: () -> Integer?

    def id_before_last_save: () -> Integer?

    def id_change_to_be_saved: () -> Array[Integer?]?

    def id_in_database: () -> Integer?

    def saved_change_to_id: () -> Array[Integer?]?

    def saved_change_to_id?: () -> bool

    def will_save_change_to_id?: () -> bool

    def restore_id!: () -> void

    def clear_id_change: () -> void

    def item_type: () -> String?

    def item_type=: (String?) -> String?

    def item_type?: () -> bool

    def item_type_changed?: () -> bool

    def item_type_change: () -> [ String?, String? ]

    def item_type_will_change!: () -> void

    def item_type_was: () -> String?

    def item_type_previously_changed?: () -> bool

    def item_type_previous_change: () -> Array[String?]?

    def item_type_previously_was: () -> String?

    def item_type_before_last_save: () -> String?

    def item_type_change_to_be_saved: () -> Array[String?]?

    def item_type_in_database: () -> String?

    def saved_change_to_item_type: () -> Array[String?]?

    def saved_change_to_item_type?: () -> bool

    def will_save_change_to_item_type?: () -> bool

    def restore_item_type!: () -> void

    def clear_item_type_change: () -> void

    def value: () -> String?

    def value=: (String?) -> String?

    def value?: () -> bool

    def value_changed?: () -> bool

    def value_change: () -> [ String?, String? ]

    def value_will_change!: () -> void

    def value_was: () -> String?

    def value_previously_changed?: () -> bool

    def value_previous_change: () -> Array[String?]?

    def value_previously_was: () -> String?

    def value_before_last_save: () -> String?

    def value_change_to_be_saved: () -> Array[String?]?

    def value_in_database: () -> String?

    def saved_change_to_value: () -> Array[String?]?

    def saved_change_to_value?: () -> bool

    def will_save_change_to_value?: () -> bool

    def restore_value!: () -> void

    def clear_value_change: () -> void

    def expires: () -> ActiveSupport::TimeWithZone?

    def expires=: (ActiveSupport::TimeWithZone?) -> ActiveSupport::TimeWithZone?

    def expires?: () -> bool

    def expires_changed?: () -> bool

    def expires_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

    def expires_will_change!: () -> void

    def expires_was: () -> ActiveSupport::TimeWithZone?

    def expires_previously_changed?: () -> bool

    def expires_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

    def expires_previously_was: () -> ActiveSupport::TimeWithZone?

    def expires_before_last_save: () -> ActiveSupport::TimeWithZone?

    def expires_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

    def expires_in_database: () -> ActiveSupport::TimeWithZone?

    def saved_change_to_expires: () -> Array[ActiveSupport::TimeWithZone?]?

    def saved_change_to_expires?: () -> bool

    def will_save_change_to_expires?: () -> bool

    def restore_expires!: () -> void

    def clear_expires_change: () -> void

    def automatic: () -> bool?

    def automatic=: (bool?) -> bool?

    def automatic?: () -> bool

    def automatic_changed?: () -> bool

    def automatic_change: () -> [ bool?, bool? ]

    def automatic_will_change!: () -> void

    def automatic_was: () -> bool?

    def automatic_previously_changed?: () -> bool

    def automatic_previous_change: () -> Array[bool?]?

    def automatic_previously_was: () -> bool?

    def automatic_before_last_save: () -> bool?

    def automatic_change_to_be_saved: () -> Array[bool?]?

    def automatic_in_database: () -> bool?

    def saved_change_to_automatic: () -> Array[bool?]?

    def saved_change_to_automatic?: () -> bool

    def will_save_change_to_automatic?: () -> bool

    def restore_automatic!: () -> void

    def clear_automatic_change: () -> void

    def reason: () -> String?

    def reason=: (String?) -> String?

    def reason?: () -> bool

    def reason_changed?: () -> bool

    def reason_change: () -> [ String?, String? ]

    def reason_will_change!: () -> void

    def reason_was: () -> String?

    def reason_previously_changed?: () -> bool

    def reason_previous_change: () -> Array[String?]?

    def reason_previously_was: () -> String?

    def reason_before_last_save: () -> String?

    def reason_change_to_be_saved: () -> Array[String?]?

    def reason_in_database: () -> String?

    def saved_change_to_reason: () -> Array[String?]?

    def saved_change_to_reason?: () -> bool

    def will_save_change_to_reason?: () -> bool

    def restore_reason!: () -> void

    def clear_reason_change: () -> void

    def created_at: () -> ActiveSupport::TimeWithZone

    def created_at=: (ActiveSupport::TimeWithZone) -> ActiveSupport::TimeWithZone

    def created_at?: () -> bool

    def created_at_changed?: () -> bool

    def created_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

    def created_at_will_change!: () -> void

    def created_at_was: () -> ActiveSupport::TimeWithZone?

    def created_at_previously_changed?: () -> bool

    def created_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

    def created_at_previously_was: () -> ActiveSupport::TimeWithZone?

    def created_at_before_last_save: () -> ActiveSupport::TimeWithZone?

    def created_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

    def created_at_in_database: () -> ActiveSupport::TimeWithZone?

    def saved_change_to_created_at: () -> Array[ActiveSupport::TimeWithZone?]?

    def saved_change_to_created_at?: () -> bool

    def will_save_change_to_created_at?: () -> bool

    def restore_created_at!: () -> void

    def clear_created_at_change: () -> void

    def updated_at: () -> ActiveSupport::TimeWithZone

    def updated_at=: (ActiveSupport::TimeWithZone) -> ActiveSupport::TimeWithZone

    def updated_at?: () -> bool

    def updated_at_changed?: () -> bool

    def updated_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

    def updated_at_will_change!: () -> void

    def updated_at_was: () -> ActiveSupport::TimeWithZone?

    def updated_at_previously_changed?: () -> bool

    def updated_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

    def updated_at_previously_was: () -> ActiveSupport::TimeWithZone?

    def updated_at_before_last_save: () -> ActiveSupport::TimeWithZone?

    def updated_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

    def updated_at_in_database: () -> ActiveSupport::TimeWithZone?

    def saved_change_to_updated_at: () -> Array[ActiveSupport::TimeWithZone?]?

    def saved_change_to_updated_at?: () -> bool

    def will_save_change_to_updated_at?: () -> bool

    def restore_updated_at!: () -> void

    def clear_updated_at_change: () -> void
  end
  include GeneratedAttributeMethods

  module GeneratedAssociationMethods
  end
  include GeneratedAssociationMethods

  def self.active: () -> ActiveRecord_Relation

  # Manually added (dynamically created)
  def self.ips: () -> ActiveRecord_Relation
  def self.emails: () -> ActiveRecord_Relation
  def self.email_hosts: () -> ActiveRecord_Relation

  module GeneratedRelationMethods
    def active: () -> ActiveRecord_Relation

    # Manually added (dynamically created)
    def ips: () -> ActiveRecord_Relation
    def emails: () -> ActiveRecord_Relation
    def email_hosts: () -> ActiveRecord_Relation
  end

  class ActiveRecord_Relation < ::ActiveRecord::Relation
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[BlockedItem, Integer]
    include Enumerable[BlockedItem]
  end

  class ActiveRecord_Associations_CollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[BlockedItem, Integer]
  end
end

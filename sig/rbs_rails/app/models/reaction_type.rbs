class ReactionType < ::ApplicationRecord
  extend _ActiveRecord_Relation_ClassMethods[ReactionType, ActiveRecord_Relation, Integer]

  module GeneratedAttributeMethods
    def id: () -> Integer

    def id=: (Integer) -> Integer

    def id?: () -> bool

    def id_changed?: () -> bool

    def id_change: () -> [ Integer?, Integer? ]

    def id_will_change!: () -> void

    def id_was: () -> Integer?

    def id_previously_changed?: () -> bool

    def id_previous_change: () -> Array[Integer?]?

    def id_previously_was: () -> Integer?

    def id_before_last_save: () -> Integer?

    def id_change_to_be_saved: () -> Array[Integer?]?

    def id_in_database: () -> Integer?

    def saved_change_to_id: () -> Array[Integer?]?

    def saved_change_to_id?: () -> bool

    def will_save_change_to_id?: () -> bool

    def restore_id!: () -> void

    def clear_id_change: () -> void

    def name: () -> String?

    def name=: (String?) -> String?

    def name?: () -> bool

    def name_changed?: () -> bool

    def name_change: () -> [ String?, String? ]

    def name_will_change!: () -> void

    def name_was: () -> String?

    def name_previously_changed?: () -> bool

    def name_previous_change: () -> Array[String?]?

    def name_previously_was: () -> String?

    def name_before_last_save: () -> String?

    def name_change_to_be_saved: () -> Array[String?]?

    def name_in_database: () -> String?

    def saved_change_to_name: () -> Array[String?]?

    def saved_change_to_name?: () -> bool

    def will_save_change_to_name?: () -> bool

    def restore_name!: () -> void

    def clear_name_change: () -> void

    def description: () -> String?

    def description=: (String?) -> String?

    def description?: () -> bool

    def description_changed?: () -> bool

    def description_change: () -> [ String?, String? ]

    def description_will_change!: () -> void

    def description_was: () -> String?

    def description_previously_changed?: () -> bool

    def description_previous_change: () -> Array[String?]?

    def description_previously_was: () -> String?

    def description_before_last_save: () -> String?

    def description_change_to_be_saved: () -> Array[String?]?

    def description_in_database: () -> String?

    def saved_change_to_description: () -> Array[String?]?

    def saved_change_to_description?: () -> bool

    def will_save_change_to_description?: () -> bool

    def restore_description!: () -> void

    def clear_description_change: () -> void

    def on_post_label: () -> String?

    def on_post_label=: (String?) -> String?

    def on_post_label?: () -> bool

    def on_post_label_changed?: () -> bool

    def on_post_label_change: () -> [ String?, String? ]

    def on_post_label_will_change!: () -> void

    def on_post_label_was: () -> String?

    def on_post_label_previously_changed?: () -> bool

    def on_post_label_previous_change: () -> Array[String?]?

    def on_post_label_previously_was: () -> String?

    def on_post_label_before_last_save: () -> String?

    def on_post_label_change_to_be_saved: () -> Array[String?]?

    def on_post_label_in_database: () -> String?

    def saved_change_to_on_post_label: () -> Array[String?]?

    def saved_change_to_on_post_label?: () -> bool

    def will_save_change_to_on_post_label?: () -> bool

    def restore_on_post_label!: () -> void

    def clear_on_post_label_change: () -> void

    def icon: () -> String?

    def icon=: (String?) -> String?

    def icon?: () -> bool

    def icon_changed?: () -> bool

    def icon_change: () -> [ String?, String? ]

    def icon_will_change!: () -> void

    def icon_was: () -> String?

    def icon_previously_changed?: () -> bool

    def icon_previous_change: () -> Array[String?]?

    def icon_previously_was: () -> String?

    def icon_before_last_save: () -> String?

    def icon_change_to_be_saved: () -> Array[String?]?

    def icon_in_database: () -> String?

    def saved_change_to_icon: () -> Array[String?]?

    def saved_change_to_icon?: () -> bool

    def will_save_change_to_icon?: () -> bool

    def restore_icon!: () -> void

    def clear_icon_change: () -> void

    def color: () -> String?

    def color=: (String?) -> String?

    def color?: () -> bool

    def color_changed?: () -> bool

    def color_change: () -> [ String?, String? ]

    def color_will_change!: () -> void

    def color_was: () -> String?

    def color_previously_changed?: () -> bool

    def color_previous_change: () -> Array[String?]?

    def color_previously_was: () -> String?

    def color_before_last_save: () -> String?

    def color_change_to_be_saved: () -> Array[String?]?

    def color_in_database: () -> String?

    def saved_change_to_color: () -> Array[String?]?

    def saved_change_to_color?: () -> bool

    def will_save_change_to_color?: () -> bool

    def restore_color!: () -> void

    def clear_color_change: () -> void

    def requires_comment: () -> bool?

    def requires_comment=: (bool?) -> bool?

    def requires_comment?: () -> bool

    def requires_comment_changed?: () -> bool

    def requires_comment_change: () -> [ bool?, bool? ]

    def requires_comment_will_change!: () -> void

    def requires_comment_was: () -> bool?

    def requires_comment_previously_changed?: () -> bool

    def requires_comment_previous_change: () -> Array[bool?]?

    def requires_comment_previously_was: () -> bool?

    def requires_comment_before_last_save: () -> bool?

    def requires_comment_change_to_be_saved: () -> Array[bool?]?

    def requires_comment_in_database: () -> bool?

    def saved_change_to_requires_comment: () -> Array[bool?]?

    def saved_change_to_requires_comment?: () -> bool

    def will_save_change_to_requires_comment?: () -> bool

    def restore_requires_comment!: () -> void

    def clear_requires_comment_change: () -> void

    def community_id: () -> Integer?

    def community_id=: (Integer?) -> Integer?

    def community_id?: () -> bool

    def community_id_changed?: () -> bool

    def community_id_change: () -> [ Integer?, Integer? ]

    def community_id_will_change!: () -> void

    def community_id_was: () -> Integer?

    def community_id_previously_changed?: () -> bool

    def community_id_previous_change: () -> Array[Integer?]?

    def community_id_previously_was: () -> Integer?

    def community_id_before_last_save: () -> Integer?

    def community_id_change_to_be_saved: () -> Array[Integer?]?

    def community_id_in_database: () -> Integer?

    def saved_change_to_community_id: () -> Array[Integer?]?

    def saved_change_to_community_id?: () -> bool

    def will_save_change_to_community_id?: () -> bool

    def restore_community_id!: () -> void

    def clear_community_id_change: () -> void

    def position: () -> Integer?

    def position=: (Integer?) -> Integer?

    def position?: () -> bool

    def position_changed?: () -> bool

    def position_change: () -> [ Integer?, Integer? ]

    def position_will_change!: () -> void

    def position_was: () -> Integer?

    def position_previously_changed?: () -> bool

    def position_previous_change: () -> Array[Integer?]?

    def position_previously_was: () -> Integer?

    def position_before_last_save: () -> Integer?

    def position_change_to_be_saved: () -> Array[Integer?]?

    def position_in_database: () -> Integer?

    def saved_change_to_position: () -> Array[Integer?]?

    def saved_change_to_position?: () -> bool

    def will_save_change_to_position?: () -> bool

    def restore_position!: () -> void

    def clear_position_change: () -> void

    def created_at: () -> ActiveSupport::TimeWithZone

    def created_at=: (ActiveSupport::TimeWithZone) -> ActiveSupport::TimeWithZone

    def created_at?: () -> bool

    def created_at_changed?: () -> bool

    def created_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

    def created_at_will_change!: () -> void

    def created_at_was: () -> ActiveSupport::TimeWithZone?

    def created_at_previously_changed?: () -> bool

    def created_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

    def created_at_previously_was: () -> ActiveSupport::TimeWithZone?

    def created_at_before_last_save: () -> ActiveSupport::TimeWithZone?

    def created_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

    def created_at_in_database: () -> ActiveSupport::TimeWithZone?

    def saved_change_to_created_at: () -> Array[ActiveSupport::TimeWithZone?]?

    def saved_change_to_created_at?: () -> bool

    def will_save_change_to_created_at?: () -> bool

    def restore_created_at!: () -> void

    def clear_created_at_change: () -> void

    def updated_at: () -> ActiveSupport::TimeWithZone

    def updated_at=: (ActiveSupport::TimeWithZone) -> ActiveSupport::TimeWithZone

    def updated_at?: () -> bool

    def updated_at_changed?: () -> bool

    def updated_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

    def updated_at_will_change!: () -> void

    def updated_at_was: () -> ActiveSupport::TimeWithZone?

    def updated_at_previously_changed?: () -> bool

    def updated_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

    def updated_at_previously_was: () -> ActiveSupport::TimeWithZone?

    def updated_at_before_last_save: () -> ActiveSupport::TimeWithZone?

    def updated_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

    def updated_at_in_database: () -> ActiveSupport::TimeWithZone?

    def saved_change_to_updated_at: () -> Array[ActiveSupport::TimeWithZone?]?

    def saved_change_to_updated_at?: () -> bool

    def will_save_change_to_updated_at?: () -> bool

    def restore_updated_at!: () -> void

    def clear_updated_at_change: () -> void

    def active: () -> bool?

    def active=: (bool?) -> bool?

    def active?: () -> bool

    def active_changed?: () -> bool

    def active_change: () -> [ bool?, bool? ]

    def active_will_change!: () -> void

    def active_was: () -> bool?

    def active_previously_changed?: () -> bool

    def active_previous_change: () -> Array[bool?]?

    def active_previously_was: () -> bool?

    def active_before_last_save: () -> bool?

    def active_change_to_be_saved: () -> Array[bool?]?

    def active_in_database: () -> bool?

    def saved_change_to_active: () -> Array[bool?]?

    def saved_change_to_active?: () -> bool

    def will_save_change_to_active?: () -> bool

    def restore_active!: () -> void

    def clear_active_change: () -> void

    def post_type_id: () -> Integer?

    def post_type_id=: (Integer?) -> Integer?

    def post_type_id?: () -> bool

    def post_type_id_changed?: () -> bool

    def post_type_id_change: () -> [ Integer?, Integer? ]

    def post_type_id_will_change!: () -> void

    def post_type_id_was: () -> Integer?

    def post_type_id_previously_changed?: () -> bool

    def post_type_id_previous_change: () -> Array[Integer?]?

    def post_type_id_previously_was: () -> Integer?

    def post_type_id_before_last_save: () -> Integer?

    def post_type_id_change_to_be_saved: () -> Array[Integer?]?

    def post_type_id_in_database: () -> Integer?

    def saved_change_to_post_type_id: () -> Array[Integer?]?

    def saved_change_to_post_type_id?: () -> bool

    def will_save_change_to_post_type_id?: () -> bool

    def restore_post_type_id!: () -> void

    def clear_post_type_id_change: () -> void
  end
  include GeneratedAttributeMethods

  def community: () -> Community
  def community=: (Community?) -> Community?
  def reload_community: () -> Community?
  def build_community: (untyped) -> Community
  def create_community: (untyped) -> Community
  def create_community!: (untyped) -> Community
  def post_type: () -> PostType?
  def post_type=: (PostType?) -> PostType?
  def reload_post_type: () -> PostType?
  def build_post_type: (untyped) -> PostType
  def create_post_type: (untyped) -> PostType
  def create_post_type!: (untyped) -> PostType
  module GeneratedAssociationMethods
  end
  include GeneratedAssociationMethods

  def self.active: () -> ActiveRecord_Relation

  module GeneratedRelationMethods
    def active: () -> ActiveRecord_Relation
  end

  class ActiveRecord_Relation < ::ActiveRecord::Relation
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[ReactionType, Integer]
    include Enumerable[ReactionType]
  end

  class ActiveRecord_Associations_CollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[ReactionType, Integer]
  end
end

class PinnedLink < ::ApplicationRecord
  extend _ActiveRecord_Relation_ClassMethods[PinnedLink, ActiveRecord_Relation, Integer]

  module GeneratedAttributeMethods
    def id: () -> Integer

    def id=: (Integer) -> Integer

    def id?: () -> bool

    def id_changed?: () -> bool

    def id_change: () -> [ Integer?, Integer? ]

    def id_will_change!: () -> void

    def id_was: () -> Integer?

    def id_previously_changed?: () -> bool

    def id_previous_change: () -> Array[Integer?]?

    def id_previously_was: () -> Integer?

    def id_before_last_save: () -> Integer?

    def id_change_to_be_saved: () -> Array[Integer?]?

    def id_in_database: () -> Integer?

    def saved_change_to_id: () -> Array[Integer?]?

    def saved_change_to_id?: () -> bool

    def will_save_change_to_id?: () -> bool

    def restore_id!: () -> void

    def clear_id_change: () -> void

    def community_id: () -> Integer?

    def community_id=: (Integer?) -> Integer?

    def community_id?: () -> bool

    def community_id_changed?: () -> bool

    def community_id_change: () -> [ Integer?, Integer? ]

    def community_id_will_change!: () -> void

    def community_id_was: () -> Integer?

    def community_id_previously_changed?: () -> bool

    def community_id_previous_change: () -> Array[Integer?]?

    def community_id_previously_was: () -> Integer?

    def community_id_before_last_save: () -> Integer?

    def community_id_change_to_be_saved: () -> Array[Integer?]?

    def community_id_in_database: () -> Integer?

    def saved_change_to_community_id: () -> Array[Integer?]?

    def saved_change_to_community_id?: () -> bool

    def will_save_change_to_community_id?: () -> bool

    def restore_community_id!: () -> void

    def clear_community_id_change: () -> void

    def label: () -> String?

    def label=: (String?) -> String?

    def label?: () -> bool

    def label_changed?: () -> bool

    def label_change: () -> [ String?, String? ]

    def label_will_change!: () -> void

    def label_was: () -> String?

    def label_previously_changed?: () -> bool

    def label_previous_change: () -> Array[String?]?

    def label_previously_was: () -> String?

    def label_before_last_save: () -> String?

    def label_change_to_be_saved: () -> Array[String?]?

    def label_in_database: () -> String?

    def saved_change_to_label: () -> Array[String?]?

    def saved_change_to_label?: () -> bool

    def will_save_change_to_label?: () -> bool

    def restore_label!: () -> void

    def clear_label_change: () -> void

    def link: () -> String?

    def link=: (String?) -> String?

    def link?: () -> bool

    def link_changed?: () -> bool

    def link_change: () -> [ String?, String? ]

    def link_will_change!: () -> void

    def link_was: () -> String?

    def link_previously_changed?: () -> bool

    def link_previous_change: () -> Array[String?]?

    def link_previously_was: () -> String?

    def link_before_last_save: () -> String?

    def link_change_to_be_saved: () -> Array[String?]?

    def link_in_database: () -> String?

    def saved_change_to_link: () -> Array[String?]?

    def saved_change_to_link?: () -> bool

    def will_save_change_to_link?: () -> bool

    def restore_link!: () -> void

    def clear_link_change: () -> void

    def post_id: () -> Integer?

    def post_id=: (Integer?) -> Integer?

    def post_id?: () -> bool

    def post_id_changed?: () -> bool

    def post_id_change: () -> [ Integer?, Integer? ]

    def post_id_will_change!: () -> void

    def post_id_was: () -> Integer?

    def post_id_previously_changed?: () -> bool

    def post_id_previous_change: () -> Array[Integer?]?

    def post_id_previously_was: () -> Integer?

    def post_id_before_last_save: () -> Integer?

    def post_id_change_to_be_saved: () -> Array[Integer?]?

    def post_id_in_database: () -> Integer?

    def saved_change_to_post_id: () -> Array[Integer?]?

    def saved_change_to_post_id?: () -> bool

    def will_save_change_to_post_id?: () -> bool

    def restore_post_id!: () -> void

    def clear_post_id_change: () -> void

    def active: () -> bool?

    def active=: (bool?) -> bool?

    def active?: () -> bool

    def active_changed?: () -> bool

    def active_change: () -> [ bool?, bool? ]

    def active_will_change!: () -> void

    def active_was: () -> bool?

    def active_previously_changed?: () -> bool

    def active_previous_change: () -> Array[bool?]?

    def active_previously_was: () -> bool?

    def active_before_last_save: () -> bool?

    def active_change_to_be_saved: () -> Array[bool?]?

    def active_in_database: () -> bool?

    def saved_change_to_active: () -> Array[bool?]?

    def saved_change_to_active?: () -> bool

    def will_save_change_to_active?: () -> bool

    def restore_active!: () -> void

    def clear_active_change: () -> void

    def shown_after: () -> ActiveSupport::TimeWithZone?

    def shown_after=: (ActiveSupport::TimeWithZone?) -> ActiveSupport::TimeWithZone?

    def shown_after?: () -> bool

    def shown_after_changed?: () -> bool

    def shown_after_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

    def shown_after_will_change!: () -> void

    def shown_after_was: () -> ActiveSupport::TimeWithZone?

    def shown_after_previously_changed?: () -> bool

    def shown_after_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

    def shown_after_previously_was: () -> ActiveSupport::TimeWithZone?

    def shown_after_before_last_save: () -> ActiveSupport::TimeWithZone?

    def shown_after_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

    def shown_after_in_database: () -> ActiveSupport::TimeWithZone?

    def saved_change_to_shown_after: () -> Array[ActiveSupport::TimeWithZone?]?

    def saved_change_to_shown_after?: () -> bool

    def will_save_change_to_shown_after?: () -> bool

    def restore_shown_after!: () -> void

    def clear_shown_after_change: () -> void

    def shown_before: () -> ActiveSupport::TimeWithZone?

    def shown_before=: (ActiveSupport::TimeWithZone?) -> ActiveSupport::TimeWithZone?

    def shown_before?: () -> bool

    def shown_before_changed?: () -> bool

    def shown_before_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

    def shown_before_will_change!: () -> void

    def shown_before_was: () -> ActiveSupport::TimeWithZone?

    def shown_before_previously_changed?: () -> bool

    def shown_before_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

    def shown_before_previously_was: () -> ActiveSupport::TimeWithZone?

    def shown_before_before_last_save: () -> ActiveSupport::TimeWithZone?

    def shown_before_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

    def shown_before_in_database: () -> ActiveSupport::TimeWithZone?

    def saved_change_to_shown_before: () -> Array[ActiveSupport::TimeWithZone?]?

    def saved_change_to_shown_before?: () -> bool

    def will_save_change_to_shown_before?: () -> bool

    def restore_shown_before!: () -> void

    def clear_shown_before_change: () -> void

    def created_at: () -> ActiveSupport::TimeWithZone

    def created_at=: (ActiveSupport::TimeWithZone) -> ActiveSupport::TimeWithZone

    def created_at?: () -> bool

    def created_at_changed?: () -> bool

    def created_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

    def created_at_will_change!: () -> void

    def created_at_was: () -> ActiveSupport::TimeWithZone?

    def created_at_previously_changed?: () -> bool

    def created_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

    def created_at_previously_was: () -> ActiveSupport::TimeWithZone?

    def created_at_before_last_save: () -> ActiveSupport::TimeWithZone?

    def created_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

    def created_at_in_database: () -> ActiveSupport::TimeWithZone?

    def saved_change_to_created_at: () -> Array[ActiveSupport::TimeWithZone?]?

    def saved_change_to_created_at?: () -> bool

    def will_save_change_to_created_at?: () -> bool

    def restore_created_at!: () -> void

    def clear_created_at_change: () -> void

    def updated_at: () -> ActiveSupport::TimeWithZone

    def updated_at=: (ActiveSupport::TimeWithZone) -> ActiveSupport::TimeWithZone

    def updated_at?: () -> bool

    def updated_at_changed?: () -> bool

    def updated_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

    def updated_at_will_change!: () -> void

    def updated_at_was: () -> ActiveSupport::TimeWithZone?

    def updated_at_previously_changed?: () -> bool

    def updated_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

    def updated_at_previously_was: () -> ActiveSupport::TimeWithZone?

    def updated_at_before_last_save: () -> ActiveSupport::TimeWithZone?

    def updated_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

    def updated_at_in_database: () -> ActiveSupport::TimeWithZone?

    def saved_change_to_updated_at: () -> Array[ActiveSupport::TimeWithZone?]?

    def saved_change_to_updated_at?: () -> bool

    def will_save_change_to_updated_at?: () -> bool

    def restore_updated_at!: () -> void

    def clear_updated_at_change: () -> void
  end
  include GeneratedAttributeMethods

  def community: () -> Community?
  def community=: (Community?) -> Community?
  def reload_community: () -> Community?
  def build_community: (untyped) -> Community
  def create_community: (untyped) -> Community
  def create_community!: (untyped) -> Community
  def post: () -> Post
  def post=: (Post?) -> Post?
  def reload_post: () -> Post?
  def build_post: (untyped) -> Post
  def create_post: (untyped) -> Post
  def create_post!: (untyped) -> Post
  module GeneratedAssociationMethods
  end
  include GeneratedAssociationMethods

  module GeneratedRelationMethods
  end

  class ActiveRecord_Relation < ::ActiveRecord::Relation
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[PinnedLink, Integer]
    include Enumerable[PinnedLink]
  end

  class ActiveRecord_Associations_CollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[PinnedLink, Integer]
  end
end

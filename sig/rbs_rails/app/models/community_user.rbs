class CommunityUser < ::ApplicationRecord
  extend _ActiveRecord_Relation_ClassMethods[CommunityUser, ActiveRecord_Relation, Integer]

  module GeneratedAttributeMethods
    def id: () -> Integer

    def id=: (Integer) -> Integer

    def id?: () -> bool

    def id_changed?: () -> bool

    def id_change: () -> [ Integer?, Integer? ]

    def id_will_change!: () -> void

    def id_was: () -> Integer?

    def id_previously_changed?: () -> bool

    def id_previous_change: () -> Array[Integer?]?

    def id_previously_was: () -> Integer?

    def id_before_last_save: () -> Integer?

    def id_change_to_be_saved: () -> Array[Integer?]?

    def id_in_database: () -> Integer?

    def saved_change_to_id: () -> Array[Integer?]?

    def saved_change_to_id?: () -> bool

    def will_save_change_to_id?: () -> bool

    def restore_id!: () -> void

    def clear_id_change: () -> void

    def community_id: () -> Integer

    def community_id=: (Integer) -> Integer

    def community_id?: () -> bool

    def community_id_changed?: () -> bool

    def community_id_change: () -> [ Integer?, Integer? ]

    def community_id_will_change!: () -> void

    def community_id_was: () -> Integer?

    def community_id_previously_changed?: () -> bool

    def community_id_previous_change: () -> Array[Integer?]?

    def community_id_previously_was: () -> Integer?

    def community_id_before_last_save: () -> Integer?

    def community_id_change_to_be_saved: () -> Array[Integer?]?

    def community_id_in_database: () -> Integer?

    def saved_change_to_community_id: () -> Array[Integer?]?

    def saved_change_to_community_id?: () -> bool

    def will_save_change_to_community_id?: () -> bool

    def restore_community_id!: () -> void

    def clear_community_id_change: () -> void

    def user_id: () -> Integer

    def user_id=: (Integer) -> Integer

    def user_id?: () -> bool

    def user_id_changed?: () -> bool

    def user_id_change: () -> [ Integer?, Integer? ]

    def user_id_will_change!: () -> void

    def user_id_was: () -> Integer?

    def user_id_previously_changed?: () -> bool

    def user_id_previous_change: () -> Array[Integer?]?

    def user_id_previously_was: () -> Integer?

    def user_id_before_last_save: () -> Integer?

    def user_id_change_to_be_saved: () -> Array[Integer?]?

    def user_id_in_database: () -> Integer?

    def saved_change_to_user_id: () -> Array[Integer?]?

    def saved_change_to_user_id?: () -> bool

    def will_save_change_to_user_id?: () -> bool

    def restore_user_id!: () -> void

    def clear_user_id_change: () -> void

    def is_moderator: () -> bool?

    def is_moderator=: (bool?) -> bool?

    def is_moderator?: () -> bool

    def is_moderator_changed?: () -> bool

    def is_moderator_change: () -> [ bool?, bool? ]

    def is_moderator_will_change!: () -> void

    def is_moderator_was: () -> bool?

    def is_moderator_previously_changed?: () -> bool

    def is_moderator_previous_change: () -> Array[bool?]?

    def is_moderator_previously_was: () -> bool?

    def is_moderator_before_last_save: () -> bool?

    def is_moderator_change_to_be_saved: () -> Array[bool?]?

    def is_moderator_in_database: () -> bool?

    def saved_change_to_is_moderator: () -> Array[bool?]?

    def saved_change_to_is_moderator?: () -> bool

    def will_save_change_to_is_moderator?: () -> bool

    def restore_is_moderator!: () -> void

    def clear_is_moderator_change: () -> void

    def is_admin: () -> bool?

    def is_admin=: (bool?) -> bool?

    def is_admin?: () -> bool

    def is_admin_changed?: () -> bool

    def is_admin_change: () -> [ bool?, bool? ]

    def is_admin_will_change!: () -> void

    def is_admin_was: () -> bool?

    def is_admin_previously_changed?: () -> bool

    def is_admin_previous_change: () -> Array[bool?]?

    def is_admin_previously_was: () -> bool?

    def is_admin_before_last_save: () -> bool?

    def is_admin_change_to_be_saved: () -> Array[bool?]?

    def is_admin_in_database: () -> bool?

    def saved_change_to_is_admin: () -> Array[bool?]?

    def saved_change_to_is_admin?: () -> bool

    def will_save_change_to_is_admin?: () -> bool

    def restore_is_admin!: () -> void

    def clear_is_admin_change: () -> void

    def reputation: () -> Integer?

    def reputation=: (Integer?) -> Integer?

    def reputation?: () -> bool

    def reputation_changed?: () -> bool

    def reputation_change: () -> [ Integer?, Integer? ]

    def reputation_will_change!: () -> void

    def reputation_was: () -> Integer?

    def reputation_previously_changed?: () -> bool

    def reputation_previous_change: () -> Array[Integer?]?

    def reputation_previously_was: () -> Integer?

    def reputation_before_last_save: () -> Integer?

    def reputation_change_to_be_saved: () -> Array[Integer?]?

    def reputation_in_database: () -> Integer?

    def saved_change_to_reputation: () -> Array[Integer?]?

    def saved_change_to_reputation?: () -> bool

    def will_save_change_to_reputation?: () -> bool

    def restore_reputation!: () -> void

    def clear_reputation_change: () -> void

    def created_at: () -> ActiveSupport::TimeWithZone

    def created_at=: (ActiveSupport::TimeWithZone) -> ActiveSupport::TimeWithZone

    def created_at?: () -> bool

    def created_at_changed?: () -> bool

    def created_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

    def created_at_will_change!: () -> void

    def created_at_was: () -> ActiveSupport::TimeWithZone?

    def created_at_previously_changed?: () -> bool

    def created_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

    def created_at_previously_was: () -> ActiveSupport::TimeWithZone?

    def created_at_before_last_save: () -> ActiveSupport::TimeWithZone?

    def created_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

    def created_at_in_database: () -> ActiveSupport::TimeWithZone?

    def saved_change_to_created_at: () -> Array[ActiveSupport::TimeWithZone?]?

    def saved_change_to_created_at?: () -> bool

    def will_save_change_to_created_at?: () -> bool

    def restore_created_at!: () -> void

    def clear_created_at_change: () -> void

    def updated_at: () -> ActiveSupport::TimeWithZone

    def updated_at=: (ActiveSupport::TimeWithZone) -> ActiveSupport::TimeWithZone

    def updated_at?: () -> bool

    def updated_at_changed?: () -> bool

    def updated_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

    def updated_at_will_change!: () -> void

    def updated_at_was: () -> ActiveSupport::TimeWithZone?

    def updated_at_previously_changed?: () -> bool

    def updated_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

    def updated_at_previously_was: () -> ActiveSupport::TimeWithZone?

    def updated_at_before_last_save: () -> ActiveSupport::TimeWithZone?

    def updated_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

    def updated_at_in_database: () -> ActiveSupport::TimeWithZone?

    def saved_change_to_updated_at: () -> Array[ActiveSupport::TimeWithZone?]?

    def saved_change_to_updated_at?: () -> bool

    def will_save_change_to_updated_at?: () -> bool

    def restore_updated_at!: () -> void

    def clear_updated_at_change: () -> void

    def is_suspended: () -> bool?

    def is_suspended=: (bool?) -> bool?

    def is_suspended?: () -> bool

    def is_suspended_changed?: () -> bool

    def is_suspended_change: () -> [ bool?, bool? ]

    def is_suspended_will_change!: () -> void

    def is_suspended_was: () -> bool?

    def is_suspended_previously_changed?: () -> bool

    def is_suspended_previous_change: () -> Array[bool?]?

    def is_suspended_previously_was: () -> bool?

    def is_suspended_before_last_save: () -> bool?

    def is_suspended_change_to_be_saved: () -> Array[bool?]?

    def is_suspended_in_database: () -> bool?

    def saved_change_to_is_suspended: () -> Array[bool?]?

    def saved_change_to_is_suspended?: () -> bool

    def will_save_change_to_is_suspended?: () -> bool

    def restore_is_suspended!: () -> void

    def clear_is_suspended_change: () -> void

    def suspension_end: () -> ActiveSupport::TimeWithZone?

    def suspension_end=: (ActiveSupport::TimeWithZone?) -> ActiveSupport::TimeWithZone?

    def suspension_end?: () -> bool

    def suspension_end_changed?: () -> bool

    def suspension_end_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

    def suspension_end_will_change!: () -> void

    def suspension_end_was: () -> ActiveSupport::TimeWithZone?

    def suspension_end_previously_changed?: () -> bool

    def suspension_end_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

    def suspension_end_previously_was: () -> ActiveSupport::TimeWithZone?

    def suspension_end_before_last_save: () -> ActiveSupport::TimeWithZone?

    def suspension_end_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

    def suspension_end_in_database: () -> ActiveSupport::TimeWithZone?

    def saved_change_to_suspension_end: () -> Array[ActiveSupport::TimeWithZone?]?

    def saved_change_to_suspension_end?: () -> bool

    def will_save_change_to_suspension_end?: () -> bool

    def restore_suspension_end!: () -> void

    def clear_suspension_end_change: () -> void

    def suspension_public_comment: () -> String?

    def suspension_public_comment=: (String?) -> String?

    def suspension_public_comment?: () -> bool

    def suspension_public_comment_changed?: () -> bool

    def suspension_public_comment_change: () -> [ String?, String? ]

    def suspension_public_comment_will_change!: () -> void

    def suspension_public_comment_was: () -> String?

    def suspension_public_comment_previously_changed?: () -> bool

    def suspension_public_comment_previous_change: () -> Array[String?]?

    def suspension_public_comment_previously_was: () -> String?

    def suspension_public_comment_before_last_save: () -> String?

    def suspension_public_comment_change_to_be_saved: () -> Array[String?]?

    def suspension_public_comment_in_database: () -> String?

    def saved_change_to_suspension_public_comment: () -> Array[String?]?

    def saved_change_to_suspension_public_comment?: () -> bool

    def will_save_change_to_suspension_public_comment?: () -> bool

    def restore_suspension_public_comment!: () -> void

    def clear_suspension_public_comment_change: () -> void

    def trust_level: () -> Integer?

    def trust_level=: (Integer?) -> Integer?

    def trust_level?: () -> bool

    def trust_level_changed?: () -> bool

    def trust_level_change: () -> [ Integer?, Integer? ]

    def trust_level_will_change!: () -> void

    def trust_level_was: () -> Integer?

    def trust_level_previously_changed?: () -> bool

    def trust_level_previous_change: () -> Array[Integer?]?

    def trust_level_previously_was: () -> Integer?

    def trust_level_before_last_save: () -> Integer?

    def trust_level_change_to_be_saved: () -> Array[Integer?]?

    def trust_level_in_database: () -> Integer?

    def saved_change_to_trust_level: () -> Array[Integer?]?

    def saved_change_to_trust_level?: () -> bool

    def will_save_change_to_trust_level?: () -> bool

    def restore_trust_level!: () -> void

    def clear_trust_level_change: () -> void

    def deleted: () -> bool

    def deleted=: (bool) -> bool

    def deleted?: () -> bool

    def deleted_changed?: () -> bool

    def deleted_change: () -> [ bool?, bool? ]

    def deleted_will_change!: () -> void

    def deleted_was: () -> bool?

    def deleted_previously_changed?: () -> bool

    def deleted_previous_change: () -> Array[bool?]?

    def deleted_previously_was: () -> bool?

    def deleted_before_last_save: () -> bool?

    def deleted_change_to_be_saved: () -> Array[bool?]?

    def deleted_in_database: () -> bool?

    def saved_change_to_deleted: () -> Array[bool?]?

    def saved_change_to_deleted?: () -> bool

    def will_save_change_to_deleted?: () -> bool

    def restore_deleted!: () -> void

    def clear_deleted_change: () -> void

    def deleted_at: () -> ActiveSupport::TimeWithZone?

    def deleted_at=: (ActiveSupport::TimeWithZone?) -> ActiveSupport::TimeWithZone?

    def deleted_at?: () -> bool

    def deleted_at_changed?: () -> bool

    def deleted_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

    def deleted_at_will_change!: () -> void

    def deleted_at_was: () -> ActiveSupport::TimeWithZone?

    def deleted_at_previously_changed?: () -> bool

    def deleted_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

    def deleted_at_previously_was: () -> ActiveSupport::TimeWithZone?

    def deleted_at_before_last_save: () -> ActiveSupport::TimeWithZone?

    def deleted_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

    def deleted_at_in_database: () -> ActiveSupport::TimeWithZone?

    def saved_change_to_deleted_at: () -> Array[ActiveSupport::TimeWithZone?]?

    def saved_change_to_deleted_at?: () -> bool

    def will_save_change_to_deleted_at?: () -> bool

    def restore_deleted_at!: () -> void

    def clear_deleted_at_change: () -> void

    def deleted_by_id: () -> Integer?

    def deleted_by_id=: (Integer?) -> Integer?

    def deleted_by_id?: () -> bool

    def deleted_by_id_changed?: () -> bool

    def deleted_by_id_change: () -> [ Integer?, Integer? ]

    def deleted_by_id_will_change!: () -> void

    def deleted_by_id_was: () -> Integer?

    def deleted_by_id_previously_changed?: () -> bool

    def deleted_by_id_previous_change: () -> Array[Integer?]?

    def deleted_by_id_previously_was: () -> Integer?

    def deleted_by_id_before_last_save: () -> Integer?

    def deleted_by_id_change_to_be_saved: () -> Array[Integer?]?

    def deleted_by_id_in_database: () -> Integer?

    def saved_change_to_deleted_by_id: () -> Array[Integer?]?

    def saved_change_to_deleted_by_id?: () -> bool

    def will_save_change_to_deleted_by_id?: () -> bool

    def restore_deleted_by_id!: () -> void

    def clear_deleted_by_id_change: () -> void
  end
  include GeneratedAttributeMethods
  def mod_warnings: () -> ModWarning::ActiveRecord_Associations_CollectionProxy
  def mod_warnings=: (ModWarning::ActiveRecord_Associations_CollectionProxy | Array[ModWarning]) -> (ModWarning::ActiveRecord_Associations_CollectionProxy | Array[ModWarning])
  def mod_warning_ids: () -> Array[Integer]
  def mod_warning_ids=: (Array[Integer]) -> Array[Integer]
  def user_abilities: () -> UserAbility::ActiveRecord_Associations_CollectionProxy
  def user_abilities=: (UserAbility::ActiveRecord_Associations_CollectionProxy | Array[UserAbility]) -> (UserAbility::ActiveRecord_Associations_CollectionProxy | Array[UserAbility])
  def user_ability_ids: () -> Array[Integer]
  def user_ability_ids=: (Array[Integer]) -> Array[Integer]

  def community: () -> Community
  def community=: (Community?) -> Community?
  def reload_community: () -> Community?
  def build_community: (untyped) -> Community
  def create_community: (untyped) -> Community
  def create_community!: (untyped) -> Community
  def user: () -> User
  def user=: (User?) -> User?
  def reload_user: () -> User?
  def build_user: (untyped) -> User
  def create_user: (untyped) -> User
  def create_user!: (untyped) -> User
  def deleted_by: () -> User?
  def deleted_by=: (User?) -> User?
  def reload_deleted_by: () -> User?
  def build_deleted_by: (untyped) -> User
  def create_deleted_by: (untyped) -> User
  def create_deleted_by!: (untyped) -> User
  module GeneratedAssociationMethods
  end
  include GeneratedAssociationMethods

  def self.for_context: () -> ActiveRecord_Relation
  def self.active: () -> ActiveRecord_Relation
  def self.deleted: () -> ActiveRecord_Relation

  module GeneratedRelationMethods
    def for_context: () -> ActiveRecord_Relation

    def active: () -> ActiveRecord_Relation

    def deleted: () -> ActiveRecord_Relation
  end

  class ActiveRecord_Relation < ::ActiveRecord::Relation
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[CommunityUser, Integer]
    include Enumerable[CommunityUser]
  end

  class ActiveRecord_Associations_CollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[CommunityUser, Integer]
  end
end

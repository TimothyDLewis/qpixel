class Subscription < ::ApplicationRecord
  extend _ActiveRecord_Relation_ClassMethods[Subscription, ActiveRecord_Relation, Integer]

  module GeneratedAttributeMethods
    def id: () -> Integer

    def id=: (Integer) -> Integer

    def id?: () -> bool

    def id_changed?: () -> bool

    def id_change: () -> [ Integer?, Integer? ]

    def id_will_change!: () -> void

    def id_was: () -> Integer?

    def id_previously_changed?: () -> bool

    def id_previous_change: () -> Array[Integer?]?

    def id_previously_was: () -> Integer?

    def id_before_last_save: () -> Integer?

    def id_change_to_be_saved: () -> Array[Integer?]?

    def id_in_database: () -> Integer?

    def saved_change_to_id: () -> Array[Integer?]?

    def saved_change_to_id?: () -> bool

    def will_save_change_to_id?: () -> bool

    def restore_id!: () -> void

    def clear_id_change: () -> void

    def type: () -> String

    def type=: (String) -> String

    def type?: () -> bool

    def type_changed?: () -> bool

    def type_change: () -> [ String?, String? ]

    def type_will_change!: () -> void

    def type_was: () -> String?

    def type_previously_changed?: () -> bool

    def type_previous_change: () -> Array[String?]?

    def type_previously_was: () -> String?

    def type_before_last_save: () -> String?

    def type_change_to_be_saved: () -> Array[String?]?

    def type_in_database: () -> String?

    def saved_change_to_type: () -> Array[String?]?

    def saved_change_to_type?: () -> bool

    def will_save_change_to_type?: () -> bool

    def restore_type!: () -> void

    def clear_type_change: () -> void

    def qualifier: () -> String?

    def qualifier=: (String?) -> String?

    def qualifier?: () -> bool

    def qualifier_changed?: () -> bool

    def qualifier_change: () -> [ String?, String? ]

    def qualifier_will_change!: () -> void

    def qualifier_was: () -> String?

    def qualifier_previously_changed?: () -> bool

    def qualifier_previous_change: () -> Array[String?]?

    def qualifier_previously_was: () -> String?

    def qualifier_before_last_save: () -> String?

    def qualifier_change_to_be_saved: () -> Array[String?]?

    def qualifier_in_database: () -> String?

    def saved_change_to_qualifier: () -> Array[String?]?

    def saved_change_to_qualifier?: () -> bool

    def will_save_change_to_qualifier?: () -> bool

    def restore_qualifier!: () -> void

    def clear_qualifier_change: () -> void

    def user_id: () -> Integer?

    def user_id=: (Integer?) -> Integer?

    def user_id?: () -> bool

    def user_id_changed?: () -> bool

    def user_id_change: () -> [ Integer?, Integer? ]

    def user_id_will_change!: () -> void

    def user_id_was: () -> Integer?

    def user_id_previously_changed?: () -> bool

    def user_id_previous_change: () -> Array[Integer?]?

    def user_id_previously_was: () -> Integer?

    def user_id_before_last_save: () -> Integer?

    def user_id_change_to_be_saved: () -> Array[Integer?]?

    def user_id_in_database: () -> Integer?

    def saved_change_to_user_id: () -> Array[Integer?]?

    def saved_change_to_user_id?: () -> bool

    def will_save_change_to_user_id?: () -> bool

    def restore_user_id!: () -> void

    def clear_user_id_change: () -> void

    def enabled: () -> bool

    def enabled=: (bool) -> bool

    def enabled?: () -> bool

    def enabled_changed?: () -> bool

    def enabled_change: () -> [ bool?, bool? ]

    def enabled_will_change!: () -> void

    def enabled_was: () -> bool?

    def enabled_previously_changed?: () -> bool

    def enabled_previous_change: () -> Array[bool?]?

    def enabled_previously_was: () -> bool?

    def enabled_before_last_save: () -> bool?

    def enabled_change_to_be_saved: () -> Array[bool?]?

    def enabled_in_database: () -> bool?

    def saved_change_to_enabled: () -> Array[bool?]?

    def saved_change_to_enabled?: () -> bool

    def will_save_change_to_enabled?: () -> bool

    def restore_enabled!: () -> void

    def clear_enabled_change: () -> void

    def frequency: () -> Integer

    def frequency=: (Integer) -> Integer

    def frequency?: () -> bool

    def frequency_changed?: () -> bool

    def frequency_change: () -> [ Integer?, Integer? ]

    def frequency_will_change!: () -> void

    def frequency_was: () -> Integer?

    def frequency_previously_changed?: () -> bool

    def frequency_previous_change: () -> Array[Integer?]?

    def frequency_previously_was: () -> Integer?

    def frequency_before_last_save: () -> Integer?

    def frequency_change_to_be_saved: () -> Array[Integer?]?

    def frequency_in_database: () -> Integer?

    def saved_change_to_frequency: () -> Array[Integer?]?

    def saved_change_to_frequency?: () -> bool

    def will_save_change_to_frequency?: () -> bool

    def restore_frequency!: () -> void

    def clear_frequency_change: () -> void

    def last_sent_at: () -> ActiveSupport::TimeWithZone?

    def last_sent_at=: (ActiveSupport::TimeWithZone?) -> ActiveSupport::TimeWithZone?

    def last_sent_at?: () -> bool

    def last_sent_at_changed?: () -> bool

    def last_sent_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

    def last_sent_at_will_change!: () -> void

    def last_sent_at_was: () -> ActiveSupport::TimeWithZone?

    def last_sent_at_previously_changed?: () -> bool

    def last_sent_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

    def last_sent_at_previously_was: () -> ActiveSupport::TimeWithZone?

    def last_sent_at_before_last_save: () -> ActiveSupport::TimeWithZone?

    def last_sent_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

    def last_sent_at_in_database: () -> ActiveSupport::TimeWithZone?

    def saved_change_to_last_sent_at: () -> Array[ActiveSupport::TimeWithZone?]?

    def saved_change_to_last_sent_at?: () -> bool

    def will_save_change_to_last_sent_at?: () -> bool

    def restore_last_sent_at!: () -> void

    def clear_last_sent_at_change: () -> void

    def created_at: () -> ActiveSupport::TimeWithZone

    def created_at=: (ActiveSupport::TimeWithZone) -> ActiveSupport::TimeWithZone

    def created_at?: () -> bool

    def created_at_changed?: () -> bool

    def created_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

    def created_at_will_change!: () -> void

    def created_at_was: () -> ActiveSupport::TimeWithZone?

    def created_at_previously_changed?: () -> bool

    def created_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

    def created_at_previously_was: () -> ActiveSupport::TimeWithZone?

    def created_at_before_last_save: () -> ActiveSupport::TimeWithZone?

    def created_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

    def created_at_in_database: () -> ActiveSupport::TimeWithZone?

    def saved_change_to_created_at: () -> Array[ActiveSupport::TimeWithZone?]?

    def saved_change_to_created_at?: () -> bool

    def will_save_change_to_created_at?: () -> bool

    def restore_created_at!: () -> void

    def clear_created_at_change: () -> void

    def updated_at: () -> ActiveSupport::TimeWithZone

    def updated_at=: (ActiveSupport::TimeWithZone) -> ActiveSupport::TimeWithZone

    def updated_at?: () -> bool

    def updated_at_changed?: () -> bool

    def updated_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

    def updated_at_will_change!: () -> void

    def updated_at_was: () -> ActiveSupport::TimeWithZone?

    def updated_at_previously_changed?: () -> bool

    def updated_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

    def updated_at_previously_was: () -> ActiveSupport::TimeWithZone?

    def updated_at_before_last_save: () -> ActiveSupport::TimeWithZone?

    def updated_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

    def updated_at_in_database: () -> ActiveSupport::TimeWithZone?

    def saved_change_to_updated_at: () -> Array[ActiveSupport::TimeWithZone?]?

    def saved_change_to_updated_at?: () -> bool

    def will_save_change_to_updated_at?: () -> bool

    def restore_updated_at!: () -> void

    def clear_updated_at_change: () -> void

    def name: () -> String?

    def name=: (String?) -> String?

    def name?: () -> bool

    def name_changed?: () -> bool

    def name_change: () -> [ String?, String? ]

    def name_will_change!: () -> void

    def name_was: () -> String?

    def name_previously_changed?: () -> bool

    def name_previous_change: () -> Array[String?]?

    def name_previously_was: () -> String?

    def name_before_last_save: () -> String?

    def name_change_to_be_saved: () -> Array[String?]?

    def name_in_database: () -> String?

    def saved_change_to_name: () -> Array[String?]?

    def saved_change_to_name?: () -> bool

    def will_save_change_to_name?: () -> bool

    def restore_name!: () -> void

    def clear_name_change: () -> void

    def community_id: () -> Integer

    def community_id=: (Integer) -> Integer

    def community_id?: () -> bool

    def community_id_changed?: () -> bool

    def community_id_change: () -> [ Integer?, Integer? ]

    def community_id_will_change!: () -> void

    def community_id_was: () -> Integer?

    def community_id_previously_changed?: () -> bool

    def community_id_previous_change: () -> Array[Integer?]?

    def community_id_previously_was: () -> Integer?

    def community_id_before_last_save: () -> Integer?

    def community_id_change_to_be_saved: () -> Array[Integer?]?

    def community_id_in_database: () -> Integer?

    def saved_change_to_community_id: () -> Array[Integer?]?

    def saved_change_to_community_id?: () -> bool

    def will_save_change_to_community_id?: () -> bool

    def restore_community_id!: () -> void

    def clear_community_id_change: () -> void
  end
  include GeneratedAttributeMethods

  def community: () -> Community
  def community=: (Community?) -> Community?
  def reload_community: () -> Community?
  def build_community: (untyped) -> Community
  def create_community: (untyped) -> Community
  def create_community!: (untyped) -> Community
  def user: () -> User
  def user=: (User?) -> User?
  def reload_user: () -> User?
  def build_user: (untyped) -> User
  def create_user: (untyped) -> User
  def create_user!: (untyped) -> User
  module GeneratedAssociationMethods
  end
  include GeneratedAssociationMethods

  module GeneratedRelationMethods
  end

  class ActiveRecord_Relation < ::ActiveRecord::Relation
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[Subscription, Integer]
    include Enumerable[Subscription]
  end

  class ActiveRecord_Associations_CollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[Subscription, Integer]
  end
end

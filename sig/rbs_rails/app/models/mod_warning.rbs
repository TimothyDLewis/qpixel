class ModWarning < ::ApplicationRecord
  extend _ActiveRecord_Relation_ClassMethods[ModWarning, ActiveRecord_Relation, Integer]

  module GeneratedAttributeMethods
    def id: () -> Integer

    def id=: (Integer) -> Integer

    def id?: () -> bool

    def id_changed?: () -> bool

    def id_change: () -> [ Integer?, Integer? ]

    def id_will_change!: () -> void

    def id_was: () -> Integer?

    def id_previously_changed?: () -> bool

    def id_previous_change: () -> Array[Integer?]?

    def id_previously_was: () -> Integer?

    def id_before_last_save: () -> Integer?

    def id_change_to_be_saved: () -> Array[Integer?]?

    def id_in_database: () -> Integer?

    def saved_change_to_id: () -> Array[Integer?]?

    def saved_change_to_id?: () -> bool

    def will_save_change_to_id?: () -> bool

    def restore_id!: () -> void

    def clear_id_change: () -> void

    def community_user_id: () -> Integer?

    def community_user_id=: (Integer?) -> Integer?

    def community_user_id?: () -> bool

    def community_user_id_changed?: () -> bool

    def community_user_id_change: () -> [ Integer?, Integer? ]

    def community_user_id_will_change!: () -> void

    def community_user_id_was: () -> Integer?

    def community_user_id_previously_changed?: () -> bool

    def community_user_id_previous_change: () -> Array[Integer?]?

    def community_user_id_previously_was: () -> Integer?

    def community_user_id_before_last_save: () -> Integer?

    def community_user_id_change_to_be_saved: () -> Array[Integer?]?

    def community_user_id_in_database: () -> Integer?

    def saved_change_to_community_user_id: () -> Array[Integer?]?

    def saved_change_to_community_user_id?: () -> bool

    def will_save_change_to_community_user_id?: () -> bool

    def restore_community_user_id!: () -> void

    def clear_community_user_id_change: () -> void

    def body: () -> String?

    def body=: (String?) -> String?

    def body?: () -> bool

    def body_changed?: () -> bool

    def body_change: () -> [ String?, String? ]

    def body_will_change!: () -> void

    def body_was: () -> String?

    def body_previously_changed?: () -> bool

    def body_previous_change: () -> Array[String?]?

    def body_previously_was: () -> String?

    def body_before_last_save: () -> String?

    def body_change_to_be_saved: () -> Array[String?]?

    def body_in_database: () -> String?

    def saved_change_to_body: () -> Array[String?]?

    def saved_change_to_body?: () -> bool

    def will_save_change_to_body?: () -> bool

    def restore_body!: () -> void

    def clear_body_change: () -> void

    def is_suspension: () -> bool?

    def is_suspension=: (bool?) -> bool?

    def is_suspension?: () -> bool

    def is_suspension_changed?: () -> bool

    def is_suspension_change: () -> [ bool?, bool? ]

    def is_suspension_will_change!: () -> void

    def is_suspension_was: () -> bool?

    def is_suspension_previously_changed?: () -> bool

    def is_suspension_previous_change: () -> Array[bool?]?

    def is_suspension_previously_was: () -> bool?

    def is_suspension_before_last_save: () -> bool?

    def is_suspension_change_to_be_saved: () -> Array[bool?]?

    def is_suspension_in_database: () -> bool?

    def saved_change_to_is_suspension: () -> Array[bool?]?

    def saved_change_to_is_suspension?: () -> bool

    def will_save_change_to_is_suspension?: () -> bool

    def restore_is_suspension!: () -> void

    def clear_is_suspension_change: () -> void

    def suspension_end: () -> ActiveSupport::TimeWithZone?

    def suspension_end=: (ActiveSupport::TimeWithZone?) -> ActiveSupport::TimeWithZone?

    def suspension_end?: () -> bool

    def suspension_end_changed?: () -> bool

    def suspension_end_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

    def suspension_end_will_change!: () -> void

    def suspension_end_was: () -> ActiveSupport::TimeWithZone?

    def suspension_end_previously_changed?: () -> bool

    def suspension_end_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

    def suspension_end_previously_was: () -> ActiveSupport::TimeWithZone?

    def suspension_end_before_last_save: () -> ActiveSupport::TimeWithZone?

    def suspension_end_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

    def suspension_end_in_database: () -> ActiveSupport::TimeWithZone?

    def saved_change_to_suspension_end: () -> Array[ActiveSupport::TimeWithZone?]?

    def saved_change_to_suspension_end?: () -> bool

    def will_save_change_to_suspension_end?: () -> bool

    def restore_suspension_end!: () -> void

    def clear_suspension_end_change: () -> void

    def active: () -> bool?

    def active=: (bool?) -> bool?

    def active?: () -> bool

    def active_changed?: () -> bool

    def active_change: () -> [ bool?, bool? ]

    def active_will_change!: () -> void

    def active_was: () -> bool?

    def active_previously_changed?: () -> bool

    def active_previous_change: () -> Array[bool?]?

    def active_previously_was: () -> bool?

    def active_before_last_save: () -> bool?

    def active_change_to_be_saved: () -> Array[bool?]?

    def active_in_database: () -> bool?

    def saved_change_to_active: () -> Array[bool?]?

    def saved_change_to_active?: () -> bool

    def will_save_change_to_active?: () -> bool

    def restore_active!: () -> void

    def clear_active_change: () -> void

    def author_id: () -> Integer?

    def author_id=: (Integer?) -> Integer?

    def author_id?: () -> bool

    def author_id_changed?: () -> bool

    def author_id_change: () -> [ Integer?, Integer? ]

    def author_id_will_change!: () -> void

    def author_id_was: () -> Integer?

    def author_id_previously_changed?: () -> bool

    def author_id_previous_change: () -> Array[Integer?]?

    def author_id_previously_was: () -> Integer?

    def author_id_before_last_save: () -> Integer?

    def author_id_change_to_be_saved: () -> Array[Integer?]?

    def author_id_in_database: () -> Integer?

    def saved_change_to_author_id: () -> Array[Integer?]?

    def saved_change_to_author_id?: () -> bool

    def will_save_change_to_author_id?: () -> bool

    def restore_author_id!: () -> void

    def clear_author_id_change: () -> void

    def created_at: () -> ActiveSupport::TimeWithZone

    def created_at=: (ActiveSupport::TimeWithZone) -> ActiveSupport::TimeWithZone

    def created_at?: () -> bool

    def created_at_changed?: () -> bool

    def created_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

    def created_at_will_change!: () -> void

    def created_at_was: () -> ActiveSupport::TimeWithZone?

    def created_at_previously_changed?: () -> bool

    def created_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

    def created_at_previously_was: () -> ActiveSupport::TimeWithZone?

    def created_at_before_last_save: () -> ActiveSupport::TimeWithZone?

    def created_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

    def created_at_in_database: () -> ActiveSupport::TimeWithZone?

    def saved_change_to_created_at: () -> Array[ActiveSupport::TimeWithZone?]?

    def saved_change_to_created_at?: () -> bool

    def will_save_change_to_created_at?: () -> bool

    def restore_created_at!: () -> void

    def clear_created_at_change: () -> void

    def updated_at: () -> ActiveSupport::TimeWithZone

    def updated_at=: (ActiveSupport::TimeWithZone) -> ActiveSupport::TimeWithZone

    def updated_at?: () -> bool

    def updated_at_changed?: () -> bool

    def updated_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

    def updated_at_will_change!: () -> void

    def updated_at_was: () -> ActiveSupport::TimeWithZone?

    def updated_at_previously_changed?: () -> bool

    def updated_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

    def updated_at_previously_was: () -> ActiveSupport::TimeWithZone?

    def updated_at_before_last_save: () -> ActiveSupport::TimeWithZone?

    def updated_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

    def updated_at_in_database: () -> ActiveSupport::TimeWithZone?

    def saved_change_to_updated_at: () -> Array[ActiveSupport::TimeWithZone?]?

    def saved_change_to_updated_at?: () -> bool

    def will_save_change_to_updated_at?: () -> bool

    def restore_updated_at!: () -> void

    def clear_updated_at_change: () -> void

    def read: () -> bool?

    def read=: (bool?) -> bool?

    def read?: () -> bool

    def read_changed?: () -> bool

    def read_change: () -> [ bool?, bool? ]

    def read_will_change!: () -> void

    def read_was: () -> bool?

    def read_previously_changed?: () -> bool

    def read_previous_change: () -> Array[bool?]?

    def read_previously_was: () -> bool?

    def read_before_last_save: () -> bool?

    def read_change_to_be_saved: () -> Array[bool?]?

    def read_in_database: () -> bool?

    def saved_change_to_read: () -> Array[bool?]?

    def saved_change_to_read?: () -> bool

    def will_save_change_to_read?: () -> bool

    def restore_read!: () -> void

    def clear_read_change: () -> void
  end
  include GeneratedAttributeMethods

  def community_user: () -> CommunityUser
  def community_user=: (CommunityUser?) -> CommunityUser?
  def reload_community_user: () -> CommunityUser?
  def build_community_user: (untyped) -> CommunityUser
  def create_community_user: (untyped) -> CommunityUser
  def create_community_user!: (untyped) -> CommunityUser
  def author: () -> User
  def author=: (User?) -> User?
  def reload_author: () -> User?
  def build_author: (untyped) -> User
  def create_author: (untyped) -> User
  def create_author!: (untyped) -> User
  module GeneratedAssociationMethods
  end
  include GeneratedAssociationMethods

  module GeneratedRelationMethods
  end

  class ActiveRecord_Relation < ::ActiveRecord::Relation
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[ModWarning, Integer]
    include Enumerable[ModWarning]
  end

  class ActiveRecord_Associations_CollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[ModWarning, Integer]
  end
end
